from aiogram import F
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import types
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from database import db
from result_image import ResultImage
from io import BytesIO

router = Router()


class last_question(StatesGroup):
    view_quest = State()
    answered_quest = State()


def create_db_str(id: int):
    db[str(id)] = []


def update_db_str(callback):
    id = str(callback.from_user.id)
    ans = callback.data.split("_")[1]

    db[id].append(ans)


def get_db_str(id: int):
    return db.get(str(id), [])


async def start_polls(message: types.Message):
    create_db_str(message.from_user.id)

    await message.answer("""
    <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ –≤–∞–º:</b>
    \t1) –Ø –∂–∏–≤—É –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –Ω–∏–∫—É–¥–∞ –Ω–µ —Ç–æ—Ä–æ–ø–ª—é—Å—å
    \t2) –ú–æ—è –∂–∏–∑–Ω—å –ø–æ–ª–Ω–∞ —è—Ä–∫–∏—Ö –∫—Ä–∞—Å–æ–∫, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–ª–æ–≤–Ω–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∂–∏–∑–Ω–∏, —è –º–æ–≥—É —É–µ—Ö–∞—Ç—å –∫—É–¥–∞ —Ö–æ—á—É –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á—É
    \t3) –Ø —Ü–µ–Ω—é —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç, –Ω–µ –≥–æ–Ω—é—Å—å –∑–∞ –¥–µ–Ω—å–≥–∞–º–∏ –∏ —É—Å–ø–µ—Ö–æ–º, —Å–∫–æ—Ä–µ–µ, —Å–µ–º—å—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –¥–ª—è –º–µ–Ω—è
    \t4) –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è —Å–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ, –¥–µ–ª–∞—é —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É
    """, reply_markup=poll1())


async def update_poll(message: types.Message, text: str, keyboard=None):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"{text}",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("var1_"))
async def callbacks_var1(callback: types.CallbackQuery):
    await update_poll(callback.message, """<b>–ú–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç–æ–∫ –≤ –ø–∞—Ä—Ñ—é–º–µ: </b>
    \t–†–æ–∑—ã, –ø–∏–æ–Ω—ã
    \t–õ–∏–ª–∏–∏, –∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥
    \t–ñ–∞—Å–º–∏–Ω, –º—è—Ç–∞
    \t–ù–µ –ª—é–±–ª—é —Ü–≤–µ—Ç—ã, —Å–∫–æ—Ä–µ–µ, —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —è–≥–æ–¥–Ω–æ–µ
    """, poll2())

    await callback.answer()


@router.callback_query(F.data.startswith("var2_"))
async def callbacks_var2(callback: types.CallbackQuery):
    update_db_str(callback)

    await update_poll(callback.message, """<b>–ö–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?</b>
    \t–ë—É–ª–æ—á–∫–∞ —Å –∫–æ—Ä–∏—Ü–µ–π
    \t–ß–∏–∑–∫–µ–π–∫ —Å —Å–æ–ª–µ–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é
    \t–õ–∏–º–æ–Ω–Ω–æ-–º—è—Ç–Ω—ã–π —Å–æ—Ä–±–µ—Ç
    \t–°–∏–≥–∞—Ä–µ—Ç—É —Å –∫–æ—Ñ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!
    """, poll3())

    await callback.answer()


@router.callback_query(F.data.startswith("var3_"))
async def callbacks_var3(callback: types.CallbackQuery):
    update_db_str(callback)
    await update_poll(callback.message, """<b>–ß—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?</b>
    \t–°—Ç–æ–π–∫–æ—Å—Ç—å –∏ —à–ª–µ–π—Ñ–æ–≤–æ—Å—Ç—å 
    \t–ù–µ–∂–Ω–æ—Å—Ç—å –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ—Å—Ç—å
    \t–°–≤–µ–∂–µ—Å—Ç—å, –Ω–µ–æ–±—ã—á–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã 
    \t–¢—è–∂–µ–ª—ã–µ, –¥—Ä–µ–≤–µ—Å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã
    """, poll4())

    await callback.answer()


@router.callback_query(F.data.startswith("var4_"))
async def callbacks_var4(callback: types.CallbackQuery):
    update_db_str(callback)
    await update_poll(callback.message, """<b>–ö–∞–∫–æ–µ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ?</b>
    \t–§–∏—Å—Ç–∞—à–∫–∞
    \t–ü–ª–æ–º–±–∏—Ä
    \t–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ
    \t–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–æ—Ä–±–µ—Ç
    """, poll5())

    await callback.answer()


@router.callback_query(F.data.startswith("var5_"))
async def callbacks_var5(callback: types.CallbackQuery):
    update_db_str(callback)
    await update_poll(callback.message, """<b>–õ—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?</b>
    \t–ó–∏–º–∞ 
    \t–û—Å–µ–Ω—å
    \t–õ–µ—Ç–æ
    \t–í–µ—Å–Ω–∞
    """, poll6())

    await callback.answer()


@router.callback_query(F.data.startswith("var6_"))
async def callbacks_var6(callback: types.CallbackQuery):
    await update_poll(callback.message, """<b>–ì–¥–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>
    \t–ì–æ—Ä—ã
    \t–ú–æ—Ä–µ
    \t–ì–æ—Ä–æ–¥
    \t–î–µ—Ä–µ–≤–Ω—è
    """, poll7())

    await callback.answer()


@router.callback_query(F.data.startswith("var7_"))
async def callbacks_var7(callback: types.CallbackQuery):
    update_db_str(callback)
    await update_poll(callback.message, """<b>–ö–∞–∫—É—é –µ–¥—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?</b>
    \t–°–ª–∞–¥–∫—É—é
    \t–°–æ–ª–µ–Ω—É—é
    \t–û—Å—Ç—Ä—É—é
    \t–ü—Ä—è–Ω—É—é
    """, poll8())

    await callback.answer()


@router.callback_query(F.data.startswith("var8_"))
async def callbacks_var8(callback: types.CallbackQuery):
    update_db_str(callback)
    await update_poll(callback.message, """<b>–ö—Ç–æ —Ç—ã –ø–æ –ø—Å–∏—Ö–æ—Ç–∏–ø—É?</b>
    \t–•–æ–ª–µ—Ä–∏–∫
    \t–°–∞–Ω–≥–≤–∏–Ω–∏–∫
    \t–§–ª–µ–≥–º–∞—Ç–∏–∫
    \t–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫
    """, poll9())

    await callback.answer()


@router.callback_query(F.data.startswith("var9_"))
async def callbacks_var9(callback: types.CallbackQuery):
    await update_poll(callback.message, """<b>–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ?</b>
    \t–Ø—Ä–∫–∏–µ
    \t–¢–µ–º–Ω—ã–µ
    \t–ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ
    \t–ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ
    """, poll10())

    await callback.answer()


@router.callback_query(F.data.startswith("var10_"))
async def callbacks_var10(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(last_question.view_quest)
    await update_poll(callback.message, "<b>–ö–∞–∫ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ —Å–≤–æ–π –∞—Ä–æ–º–∞—Ç? (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤)</b>")

    await callback.answer()


@router.message(last_question.view_quest)
async def answer(message: types.Message, state: FSMContext):
    result = get_db_str(message.from_user.id)
    result.append(message.text)

    bio = BytesIO()
    bio.name = 'result.jpeg'

    img = ResultImage.result_image(result)

    img.save(bio, "JPEG")
    bio.seek(0)

    await message.answer_photo(photo=types.BufferedInputFile(bio.getvalue(), "result.jpeg"),
                               caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")

    await state.set_state(last_question.answered_quest)


def poll1():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="1)", callback_data="var1_"),
            types.InlineKeyboardButton(
                text="2)", callback_data="var1_")
        ],
        [
            types.InlineKeyboardButton(
                text="3)", callback_data="var1_"),
            types.InlineKeyboardButton(
                text="4)", callback_data="var1_")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll2():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–†–æ–∑—ã, –ø–∏–æ–Ω—ã", callback_data="var2_rose"),
            types.InlineKeyboardButton(
                text="–õ–∏–ª–∏–∏, –∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥", callback_data="var2_lily")
        ],
        [
            types.InlineKeyboardButton(
                text="–ñ–∞—Å–º–∏–Ω, –º—è—Ç–∞", callback_data="var2_jasmine"),
            types.InlineKeyboardButton(
                text="üçì", callback_data="var2_berry")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll3():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–ë—É–ª–æ—á–∫–∞ —Å –∫–æ—Ä–∏—Ü–µ–π", callback_data="var3_cinnamon"),
            types.InlineKeyboardButton(
                text="–ß–∏–∑–∫–µ–π–∫ —Å —Å–æ–ª–µ–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é", callback_data="var3_caramel")
        ],
        [
            types.InlineKeyboardButton(
                text="–õ–∏–º–æ–Ω–Ω–æ-–º—è—Ç–Ω—ã–π —Å–æ—Ä–±–µ—Ç", callback_data="var3_lemon"),
            types.InlineKeyboardButton(
                text="–°–∏–≥–∞—Ä–µ—Ç—É —Å –∫–æ—Ñ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!", callback_data="var3_cigarette")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll4():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var4_cognac"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var4_powder")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var4_citrus"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var4_tree")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll5():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var5_pistachios"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var5_vanilla")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var5_chocolate"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var5_mango")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll6():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var6_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var6_")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var6_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var6_")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll7():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var7_wind"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var7_breeze")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var7_bedsheets"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var7_meadow")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll8():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var8_sugar"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var8_sault")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var8_pepper"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var8_spices")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll9():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var9_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var9_")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var9_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var9_")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def poll10():
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 1", callback_data="var10_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 2", callback_data="var10_")
        ],
        [
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 3", callback_data="var10_"),
            types.InlineKeyboardButton(
                text="–≤–∞—Ä–∏–∞–Ω—Ç 4", callback_data="var10_")
        ]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
